name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest

    - name: Run unit tests
      run: |
        python -m unittest test_app.py -v

    - name: Generate coverage report
      run: |
        coverage run -m unittest test_app.py
        coverage report -m
        coverage html

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t flask-app:${{ github.sha }} .
        docker tag flask-app:${{ github.sha }} flask-app:latest

    - name: Test Docker image build
      run: |
        docker images flask-app

    - name: Run container health check
      run: |
        docker run -d -p 5000:5000 --name test-container flask-app:latest
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        curl -f http://localhost:5000/ || exit 1
        docker logs test-container
        docker stop test-container
        docker rm test-container

    - name: Run tests inside Docker container
      run: |
        docker run --rm flask-app:latest python -m unittest test_app.py -v

    - name: Save Docker image
      run: |
        docker save flask-app:latest | gzip > flask-app.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: flask-app.tar.gz
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t flask-app:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-app:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
